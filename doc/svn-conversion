# Edit your ~/.gitconfig to contain:
# [user]
#	name = Firstname Lastname
#	email = Your Public Email

# With no leading #, obviously.

export GITHAX=/path/to/this/directory

# Edit the authors file.  Make sure _everybody_ is in it.
#
# Make sure it is in, and stays in, UTF-8.  Git likes to use UTF-8.

mkdir thandy_tmp
cd thandy_tmp
# Consider using the --no-metadata flag here if you don't care about being
# able to refer back to svn revisions.
git svn init --trunk=updater/trunk --branches=updater/branches --tags=updater/tags --prefix=svn/ file:///home/or/svnrepo/
git svn fetch --authors-file=$GITHAX/authors.txt

# (This would be a good point to make a backup, so you don't have to
#  do it all again if you mess up a later step.)

# Set up a gitignore file
git svn show-ignore > .gitignore
vim .gitignore
git add .gitignore
git commit -m 'Add a gitignore file.'

# Filter svn metadata to a prettier format
git filter-branch --msg-filter '
        sed "s/^git-svn-id:[[:space:]]*[^[:space:]]*@\([[:digit:]]\{1,\}\)[[:space:]]*.*$/svn:r\1/"
    ' --tag-name-filter cat -- --all

# (This would be a good point to make another backup.  Now the steps
#  that eat CPU time are over.)

# Set up local branches: git clone will not preserve these.
#    git branch [newname] svn/[oldname]
#    or use the convertBranches script

# Set up local tags: git clone will not preserve these
#    See the convertTags script for guidance how, though you may want to hack
#    it.  In particular, you might want to replace ancient CVS tagging
#    conventions (tor-0_1_0-alpha) with nice new ones (v0.1.0-alpha).
#
#    The script signs its tags.  If you don't want that, edit it to pass
#    -s instead of -a.
#
#    If you wind up signing the tag, you may wind having to copy the whole
#    tree over to some machine where the key you want lives, unless you
#    are okay with having your private key live on moria.


# Delete branches and tags that you don't want
#   git branch -d badBranch

cd ..
git clone --bare thandy_tmp thandy.git

# Compress the repository.
#    This process is voodoo, but it seemed to work for me.  I am not sure
#    that this order is optimal, or that both git prunes are necessary.
#    The first 8 approaches I tried were definitely all not-optimal,
#    though.

cd thandy.git
git pack-refs --prune
git reflog expire --all
git prune
git gc --aggressive
git prune
git repack -adf --window=200 --depth=100


# Edit the configuration
cp $GITHAX/config thandy.git
vim thandy.git/config

# Set up the hooks
#     - Email hook
cp /home/or/git-hooks/post-receive thandy.git/hooks
chmod +x thandy.git/hooks/post-receive

#     - git-update-server-info hook
chmod +x thandy.git/hooks/post-update

#     - tag acl hooks
# NOT NOW.

# Chgrp and chmod+s stuff so the right group can rw it. Make this restrictive!
#XXXX

# Put it in /srv/git

# Add the file that makes it get served
touch thandy.git/git-daemon-export-ok

# Add a note to the SVN to say that it has moved.

# Set it up to get mirrored in HTTP and listed on git.torproject.org.
# See the instructions at ~torsvnwww/GIT-STUFF for more information.

# Tell everybody to set themselves up.  This means, at minimum:
#   Set up a .gitconfig
#   git-clone the repository
#   Learn how to do XYZ: a tutorial
